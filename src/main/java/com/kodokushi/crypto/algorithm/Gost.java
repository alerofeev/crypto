package com.kodokushi.crypto.algorithm;

public class Gost {

    private static final char[] S_BOX = {
            0x0c, 0x04, 0x06, 0x02, 0x0a, 0x05, 0x0b, 0x09, 0x0e, 0x08, 0x0d, 0x07, 0x00, 0x03, 0x0f, 0x01,
            0x06, 0x08, 0x02, 0x03, 0x09, 0x0a, 0x05, 0x0c, 0x01, 0x0e, 0x04, 0x07, 0x0b, 0x0d, 0x00, 0x0f,
            0x0b, 0x03, 0x05, 0x08, 0x02, 0x0f, 0x0a, 0x0d, 0x0e, 0x01, 0x07, 0x04, 0x0c, 0x09, 0x06, 0x00,
            0x0c, 0x08, 0x02, 0x01, 0x0d, 0x04, 0x0f, 0x06, 0x07, 0x00, 0x0a, 0x05, 0x03, 0x0e, 0x09, 0x0b,
            0x07, 0x0f, 0x05, 0x0a, 0x08, 0x01, 0x06, 0x0d, 0x00, 0x09, 0x03, 0x0e, 0x0b, 0x04, 0x02, 0x0c,
            0x05, 0x0d, 0x0f, 0x06, 0x09, 0x02, 0x0c, 0x0a, 0x0b, 0x07, 0x08, 0x01, 0x04, 0x03, 0x0e, 0x00,
            0x08, 0x0e, 0x02, 0x05, 0x06, 0x09, 0x01, 0x0c, 0x0f, 0x04, 0x0b, 0x00, 0x0d, 0x0a, 0x03, 0x07,
            0x01, 0x07, 0x0e, 0x0d, 0x00, 0x05, 0x08, 0x03, 0x04, 0x0f, 0x0a, 0x06, 0x09, 0x0c, 0x0b, 0x02
    };

    private final char[] message;
    private final char[] key;

    public Gost(char[] message, char[] key) {
        if (message.length % 8 != 0) {
            this.message = mPadMessage();
        } else {
            this.message = message;
        }
        this.key = key;
    }

    public char[] mGetMessage() {
        return this.message;
    }

    private char[] mPadMessage() {
        char[] paddedMessage = new char[8 * (this.message.length / 8 + 1)];
        System.arraycopy(this.message, 0, paddedMessage, 0, this.message.length);
        for (int i = this.message.length; i < paddedMessage.length; i++) {
            paddedMessage[i] = 0x00;
        }
        return paddedMessage;
    }

    public void mEncrypt() {
        for (int i = 0; i < this.message.length; i += 8) {

        }
    }

    public void mDecrypt() {
        for (int i = 0; i < this.message.length; i += 8) {

        }
    }


}
